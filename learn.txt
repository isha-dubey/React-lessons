What is React?

React is a popular JS library for building user interface, particularly for single-page applications
where you need a fast and interactive user interface.
Was developed and is maintained by facebook.

++++ Features ++++++

-component based
-learn once write anywhere
-virtual dom
-JSX

+++++++ It's extension +++++++
Redux: A state management library often used with React to manage the state of complex applications more easily.
React Router: A routing library that enables the navigation within single-page applications.
Next.js: A framework for server-rendered or statically exported React applications.
Create React App: An officially supported way to create single-page React applications, offering a modern build setup with no configuration.


++++++++ Creating a react projct ++++++++

- Add unpkg files in script tags 
- through vite
- through  npx create-react-app my-app in command line 
           cd my-app
           npm start


+++++ Babel +++++

babel is a modern Js dev tool . it uses JS complier that enables developers to
use next-generation Js .

Features provided by babel 
- syntax transformation Babel can transform syntax from newer JavaScript versions 
-Polyfills  -While Babel can transform syntax, some newer JavaScript features also require certain native objects or methods that older environments might not support (e.g., Promise, Array.from). Babel uses a library called core-js along with a plugin called @babel/plugin-transform-runtime to add these missing features (commonly known as polyfills) without polluting the global scope.
- Babels functionality is heavily plugin based
-JSX and react 


++++++ JSX +++++++++++
JSX (JavaScript XML)
JSX is a syntax extension for JavaScript, primarily used with React to describe what the UI should look like. It allows you to write HTML-like code directly in your JavaScript files. The browser doesn't understand JSX directly; it must be transformed into regular JavaScript before it can be executed


++++++++ Interpolation ++++++
suppose in the example 


const element = React.createElement("span" , {
        className : "Container"
    } , 

    ['hello students' , React.createElement("span" , {
        children : "  {what's up}" })
    ]
)
ReactDOM.render(element , root1)

instead of typing hello students we can store it into a variable 
and use that variable inside {} 

example-

const root1 = document.getElementById("root1")
const greeting = "hello students "
const element = (
    <div className = "container">
        {greeting}
        <span>what's up</span>
        </div>

)
ReactDOM.render(element , root1)


